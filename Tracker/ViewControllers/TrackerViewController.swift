//
//  tracksView.swift
//  Tracker
//
//  Created by GiyaDev on 05.05.2024.
//

import UIKit

final class TrackerViewController: UIViewController, UISearchBarDelegate, NewTrackerDelegate {
    
    private var trackerLabel = UILabel()
    private var plusButton = UIButton()
    private var searchBar: UISearchBar!
    private var datePicker = UIDatePicker()
    private var collectionView: UICollectionView!
    private let stubView = StubView(text: "–ß—Ç–æ –±—É–¥–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?")
    
    
    internal var categories: [TrackerCategory] = [] {
          didSet {
              // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ categories –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
              if categories.isEmpty {
                  // –ï—Å–ª–∏ categories –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º stubView
                  stubView.isHidden = false
                  collectionView.isHidden = true
              } else {
                  // –ï—Å–ª–∏ categories –Ω–µ –ø—É—Å—Ç–æ–π, —Å–∫—Ä—ã–≤–∞–µ–º stubView –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º collectionView
                  stubView.isHidden = true
                  collectionView.isHidden = false
                  collectionView.reloadData()
              }
          }
      }
    
    var completedTrackers: [TrackerRecord] = []
    
    override func viewDidLoad() {
        super.viewDidLoad()
        addPlusButton()
        setupViews()
        setupUI()
        setupSearchBar()
        setupDatePicker()
        setupNavigationBar()
    }
    
    private func setupViews() {
        setupStubView()
        setupCollectionView()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º categories –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        categories.isEmpty ? (stubView.isHidden = false) : (collectionView.isHidden = false)
    }
    
    private func setupStubView() {
        view.addSubview(stubView)
        
        NSLayoutConstraint.activate([
            stubView.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            stubView.centerXAnchor.constraint(equalTo: view.centerXAnchor)
        ])
    }
    
    private func setupDatePicker() {
         datePicker = UIDatePicker()
         datePicker.preferredDatePickerStyle = .compact
         datePicker.datePickerMode = .date
         datePicker.locale = Locale(identifier: "ru_RU")
         datePicker.tintColor = .black
         datePicker.date = Date()
         datePicker.addTarget(self, action: #selector(datePickerValueChanged), for: .valueChanged)
         datePicker.translatesAutoresizingMaskIntoConstraints = false
         view.addSubview(datePicker)
     }
    
    private func setupNavigationBar() {
        let datePickerBarButton = UIBarButtonItem(customView: datePicker)
        navigationItem.rightBarButtonItem = datePickerBarButton
        
        let plusNavButton = UIBarButtonItem(customView: plusButton)
        navigationItem.leftBarButtonItem = plusNavButton
    }
        
    private func setupSearchBar() {
        searchBar = UISearchBar()
        searchBar.delegate = self
        searchBar.showsCancelButton = false
        searchBar.translatesAutoresizingMaskIntoConstraints = false
        searchBar.layer.masksToBounds = true
        view.addSubview(searchBar)
        searchBar.backgroundImage = UIImage()

        if let textField = searchBar.value(forKey: "searchField") as? UITextField {
            textField.backgroundColor = Colors.systemSearchColor // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
            textField.textColor = .black
            textField.tintColor = .black
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
            let placeholderText = "–ü–æ–∏—Å–∫"
            let placeholderColor = UIColor.lightGray // –¶–≤–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
            textField.attributedPlaceholder = NSAttributedString(
                string: placeholderText,
                attributes: [NSAttributedString.Key.foregroundColor: placeholderColor]
            )
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–Ω–∞—á–∫–∞ –ª—É–ø—ã
            if let leftView = textField.leftView as? UIImageView {
                leftView.tintColor = .lightGray // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ –∑–Ω–∞—á–∫–∞ –ª—É–ø—ã
                leftView.image = leftView.image?.withRenderingMode(.alwaysTemplate)
            }
        }

        NSLayoutConstraint.activate([
            searchBar.topAnchor.constraint(equalTo: trackerLabel.topAnchor, constant: 50),
            searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 15),
            searchBar.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20)
        ])
    }
    
    func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
        UIView.animate(withDuration: 0.1) {
            searchBar.showsCancelButton = true
            searchBar.layoutIfNeeded()
        }
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        UIView.animate(withDuration: 0.8) {
            searchBar.showsCancelButton = false // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ—ë
            searchBar.text = "" // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–∏—Å–∫–æ–≤–æ–º –ø–æ–ª–µ
            searchBar.resignFirstResponder() // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        }
    }
    
    private func setupCollectionView() {
        let layout = UICollectionViewFlowLayout()
        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(collectionView)
        collectionView.backgroundColor = .lightGray
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: "TrackerCell")
        
        NSLayoutConstraint.activate([
            collectionView.topAnchor.constraint(equalTo: plusButton.bottomAnchor, constant: 20),
            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }
    
    private func addPlusButton() {
        plusButton = UIButton(type: .system)
        plusButton.setImage(UIImage(systemName: "plus"), for: .normal)
        plusButton.tintColor = .black
        plusButton.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(plusButton)
        plusButton.addTarget(self, action: #selector(didTapPlusButton), for: .touchUpInside)
    }
    
    private func setupUI() {
        
        view.backgroundColor = .white
        
        trackerLabel.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(trackerLabel)
        trackerLabel.textColor = .black
        trackerLabel.font = UIFont.boldSystemFont(ofSize: 34)
        trackerLabel.numberOfLines = 0
        trackerLabel.text = "–¢—Ä–µ–∫–µ—Ä—ã"
        
        NSLayoutConstraint.activate([
            trackerLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            trackerLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20)
        ])
    }
    
    @objc
    private func didTapPlusButton() {
        let viewController = NewTrackerViewController()
        viewController.delegate = self
        let nav = UINavigationController(rootViewController: viewController)
        present(nav,animated: true)
    }
    
    @objc func datePickerValueChanged(_ sender: UIDatePicker) {
        let selectedDate = sender.date
        let selectedDayOfWeek = Calendar.current.component(.weekday, from: selectedDate)
        print("–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: \(selectedDate). –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: \(selectedDayOfWeek)")
        // –ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–æ–≤ –ø—Ä–∏–≤—ã—á–µ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–Ω—é –Ω–µ–¥–µ–ª–∏
    }
    
    func addTrackerToCompleted(trackRecord: TrackerRecord) {
        completedTrackers.append(trackRecord) /// —Å–∫–æ—Ä–µ–µ –≤ –≤ —Ç—Ä–µ–∫–µ—Ä–µ—Å
    }
    
    func removeTrackerFromCompleted(trackRecord: TrackerRecord) {
        if let index = completedTrackers.firstIndex(where: { $0.id == trackRecord.id}) {
            completedTrackers.remove(at: index)
        }
    }
    
    func didAddTracker(_ tracker: Tracker) {
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        // –Ω–∞–ø—Ä–∏–º–µ—Ä:
        // categories[0].trackers.append(tracker) !!!!!!!!!!!!!!!!!!!!!!!!!!!!
//        collectionView.reloadData()
    }
}

extension TrackerViewController: UICollectionViewDelegateFlowLayout, UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return categories.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "TrackerCell", for: indexPath)
        cell.backgroundColor = .black
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
//        –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
//        –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
//        let newTracker = Tracker(id: UUID(), name: "–ù–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä", color: .systemPink, emoji: "üöÄ", schedule: [.everyday])
//        let updatedTrackers = selectedCategory.trackers + [newTracker]
//        
//        // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–æ–≤—ã–º –º–∞—Å—Å–∏–≤–æ–º —Ç—Ä–µ–∫–µ—Ä–æ–≤
//        let updatedCategory = TrackerCategory(titles: selectedCategory.titles, trackers: updatedTrackers)
//        
//        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
//        var updatedCategories = categories
//        updatedCategories[indexPath.item] = updatedCategory
//        
//        // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π categories
//        categories = updatedCategories
//        
//        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
//        collectionView.reloadData()
    }
}
